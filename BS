import random
import time

# Implementation of binary search algorithm.

# Naive search - scan entire list and ask if its equal to the target

def naive_search(l, target):
	# for example l = [1,2,3,10,12]
	for i in range(len(l)):
		if l[i] == target:
			return i
	return -1 


# BS

def binary(l, target, low=None, high=None):
	if low is None:
		low = 0
	if high is None:
		high = len(l) - 1

	if high < low:
		return -1 

	# for example l = [1,2,3,5,10,12]
	midpoint = (low + high) // 2

	if l[midpoint] == target:
		return midpoint
	elif target < l[midpoint]:
		return binary(l, target, low, midpoint-1)
	else:
		# target > l[midpoint]
		return binary(l, target, midpoint+1, high)

if __name__=='__main__':
	#l = [1,3,5,10,12]
	#target = 10
	#print(naive_search(l, target))
	#print(binary(l, target))
	
	lenght = 1000
	# sorted list of lenght 1000
	sorted_list = set()
	while len(sorted_list) < lenght:
		sorted_list.add(random.randint(-3*lenght, 3*lenght))
	sorted_list = sorted(list(sorted_list))

	start = time.time()
	for target in sorted_list:
		naive_search(sorted_list, target)
	end = time.time()
	print("naive_search time: ", (end - start)/lenght, "seconds")

	start = time.time()
	for target in sorted_list:
		binary(sorted_list, target)
	end = time.time()
	print("binary_search time: ", (end - start)/lenght, "seconds")
